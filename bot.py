# –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–º–ø–æ—Ä—Ç—ã
from openpyxl import Workbook
import json

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∂–∞—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
def compress_image(image_data: bytes) -> bytes:
    """–°–∂–∏–º–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –ø—Ä–µ–≤—ã—à–∞–µ—Ç 1 –ú–ë"""
    if len(image_data) <= MAX_IMAGE_SIZE_MB * 1024 * 1024:
        logger.info("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Å–∂–∞—Ç–∏—è")
        return image_data

    try:
        with Image.open(BytesIO(image_data)) as img:
            if img.mode != 'RGB':
                img = img.convert('RGB')
            
            img.thumbnail((800, 800))
            output = BytesIO()
            quality = 85
            
            while True:
                output.seek(0)
                output.truncate()
                img.save(output, format='JPEG', quality=quality, optimize=True)
                if len(output.getvalue()) <= MAX_IMAGE_SIZE_MB * 1024 * 1024:
                    break
                quality -= 5
                if quality < 50:
                    img = img.resize((img.width//2, img.height//2))
                    quality = 75
            
            logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∂–∞—Ç–æ –¥–æ {len(output.getvalue())//1024} KB")
            return output.getvalue()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è: {e}")
        raise

# –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
@bot.message_handler(content_types=['photo'], func=lambda m: user_states.get(m.chat.id, {}).get('step') == 'awaiting_barcode_scan')
def process_barcode_scan(message):
    try:
        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        
        # –°–∂–∞—Ç–∏–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
        compressed_image = compress_image(downloaded_file)
        logger.debug(f"–†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è OCR: {len(compressed_image)} –±–∞–π—Ç")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ OCR API
        response = requests.post(
            'https://api.ocr.space/parse/image',
            files={'image': ('barcode.jpg', compressed_image, 'image/jpeg')},
            data={'apikey': OCR_API_KEY, 'OCREngine': 2},
            timeout=20
        )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
        if response.status_code != 200:
            raise Exception(f"HTTP Error {response.status_code}")
        
        result = response.json()
        logger.debug(f"–û—Ç–≤–µ—Ç OCR: {json.dumps(result, indent=2)}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
        if not result.get('ParsedResults'):
            raise Exception("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç OCR API")
        
        parsed_text = result['ParsedResults'][0].get('ParsedText', '')
        logger.debug(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {parsed_text}")

        # –ü–æ–∏—Å–∫ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞
        barcode = None
        numbers = [word.strip() for word in parsed_text.split() if word.strip().isdigit()]
        valid_barcodes = [num for num in numbers if 8 <= len(num) <= 15]
        
        if valid_barcodes:
            barcode = max(valid_barcodes, key=len)
            logger.info(f"–ù–∞–π–¥–µ–Ω —à—Ç—Ä–∏—Ö–∫–æ–¥: {barcode}")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if barcode:
            # –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            with psycopg2.connect(DB_URL, sslmode="require") as conn:
                with conn.cursor() as cursor:
                    cursor.execute(
                        "SELECT name, price FROM products WHERE barcode = %s AND telegram_id = %s",
                        (barcode, message.chat.id)
                    )
                    product = cursor.fetchone()
            
            response_text = f"‚úÖ –®—Ç—Ä–∏—Ö–∫–æ–¥: `{barcode}`"
            if product:
                response_text += f"\nüì¶ –¢–æ–≤–∞—Ä: {product[0]}\nüí∞ –¶–µ–Ω–∞: {product[1]} —Ä—É–±."
            else:
                response_text += "\n‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ"
        else:
            response_text = "‚ùå –®—Ç—Ä–∏—Ö–∫–æ–¥ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ —á–µ—Ç–∫–æ–µ —Ñ–æ—Ç–æ"

        bot.send_message(
            message.chat.id,
            response_text,
            parse_mode='Markdown',
            reply_markup=main_menu()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}", exc_info=True)
        bot.send_message(
            message.chat.id,
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}",
            reply_markup=main_menu()
        )
    finally:
        user_states.pop(message.chat.id, None)
