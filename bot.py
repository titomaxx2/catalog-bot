import os
import logging
import time
import requests
import psycopg2
import telebot
from openpyxl import Workbook
from PIL import Image
from io import BytesIO
from telebot.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
DB_URL = os.getenv("DATABASE_URL")
OCR_API_KEY = os.getenv("OCR_API_KEY")  # –ü–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á –Ω–∞ https://ocr.space/

bot = telebot.TeleBot(TOKEN)
user_states = {}

# ... (–æ—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å –∫–æ–¥–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è) ...

@bot.message_handler(func=lambda m: m.text == "üì∑ –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —à—Ç—Ä–∏—Ö–∫–æ–¥")
def handle_scan(message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("–û—Ç–º–µ–Ω–∞"))
    msg = bot.send_message(
        message.chat.id,
        "üì∑ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ —à—Ç—Ä–∏—Ö–∫–æ–¥ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
        reply_markup=markup
    )
    user_states[message.chat.id] = {'step': 'awaiting_barcode_scan'}

@bot.message_handler(content_types=['photo'], 
                   func=lambda m: user_states.get(m.chat.id, {}).get('step') == 'awaiting_barcode_scan')
def process_barcode_scan(message):
    try:
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º API –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        response = requests.post(
            'https://api.ocr.space/parse/image',
            files={'image': downloaded_file},
            data={
                'apikey': OCR_API_KEY,
                'language': 'eng',
                'isOverlayRequired': False,
                'detectOrientation': True,
                'scale': True
            }
        )
        
        result = response.json()
        barcode = None
        
        if result['IsErroredOnProcessing']:
            raise Exception(result['ErrorMessage'])
        
        for item in result['ParsedResults'][0]['TextOverlay']['Lines']:
            for word in item['Words']:
                text = word['WordText']
                if text.isdigit() and len(text) in [8, 12, 13, 14]:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤
                    barcode = text
                    break
            if barcode:
                break

        if barcode:
            response_text = f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω —à—Ç—Ä–∏—Ö–∫–æ–¥: `{barcode}`\n"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            with psycopg2.connect(DB_URL, sslmode="require") as conn:
                with conn.cursor() as cursor:
                    cursor.execute("""
                        SELECT name, price FROM products 
                        WHERE barcode = %s AND telegram_id = %s
                    """, (barcode, message.chat.id))
                    product = cursor.fetchone()
                    
            if product:
                response_text += f"üì¶ –¢–æ–≤–∞—Ä –≤ –±–∞–∑–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ: {product[0]}\n–¶–µ–Ω–∞: {product[1]} —Ä—É–±."
            else:
                response_text += "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ"
        else:
            response_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —à—Ç—Ä–∏—Ö–∫–æ–¥"

        bot.send_message(
            message.chat.id,
            response_text,
            parse_mode='Markdown',
            reply_markup=main_menu()
        )
        del user_states[message.chat.id]
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        bot.send_message(
            message.chat.id,
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
            reply_markup=main_menu()
        )
        del user_states[message.chat.id]

# ... (–æ—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å –∫–æ–¥–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
