import os
import logging
import time
import requests
import psycopg2
import telebot
import json
from flask import Flask
from PIL import Image, ImageEnhance
from io import BytesIO
from threading import Thread
from openpyxl import Workbook
from telebot.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
bot = telebot.TeleBot(TOKEN)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
DB_URL = os.getenv("DATABASE_URL")
OCR_API_KEY = os.getenv("OCR_API_KEY")
MAX_IMAGE_SIZE_MB = 1
user_states = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    commands = (
        """
        CREATE TABLE IF NOT EXISTS products (
            id SERIAL PRIMARY KEY,
            telegram_id BIGINT NOT NULL,
            barcode TEXT NOT NULL UNIQUE,
            name TEXT NOT NULL,
            price FLOAT NOT NULL,
            image_id TEXT,
            created_at TIMESTAMP DEFAULT NOW()
        )
        """,
        """
        CREATE TABLE IF NOT EXISTS orders (
            id SERIAL PRIMARY KEY,
            telegram_id BIGINT NOT NULL,
            name TEXT NOT NULL,
            created_at TIMESTAMP DEFAULT NOW()
        )
        """,
        """
        CREATE TABLE IF NOT EXISTS order_items (
            id SERIAL PRIMARY KEY,
            order_id INT NOT NULL REFERENCES orders(id) ON DELETE CASCADE,
            product_id INT NOT NULL REFERENCES products(id) ON DELETE CASCADE,
            quantity INT NOT NULL DEFAULT 1,
            created_at TIMESTAMP DEFAULT NOW()
        )
        """
    )
    try:
        conn = psycopg2.connect(DB_URL, sslmode="require")
        with conn.cursor() as cursor:
            for command in commands:
                cursor.execute(command)
        conn.commit()
        logger.info("–¢–∞–±–ª–∏—Ü—ã –ë–î —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        raise

init_db()

# –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
app = Flask(__name__)

@app.route('/')
def home():
    return "Telegram Bot is Running"

def compress_image(image_data: bytes) -> bytes:
    """–°–∂–∏–º–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä –ø—Ä–µ–≤—ã—à–∞–µ—Ç 1 –ú–ë"""
    if len(image_data) <= MAX_IMAGE_SIZE_MB * 1024 * 1024:
        logger.info("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —Å–∂–∞—Ç–∏—è")
        return image_data

    try:
        with Image.open(BytesIO(image_data)) as img:
            if img.mode != 'RGB':
                img = img.convert('RGB')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
            output = BytesIO()
            quality = 85
            
            while True:
                output.seek(0)
                output.truncate()
                img.save(output, format='JPEG', quality=quality, optimize=True)
                if len(output.getvalue()) <= MAX_IMAGE_SIZE_MB * 1024 * 1024:
                    break
                quality -= 5
                if quality < 50:
                    break
            
            logger.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∂–∞—Ç–æ –¥–æ {len(output.getvalue())//1024} KB")
            return output.getvalue()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è: {e}")
        raise

def preprocess_image(image_data: bytes) -> bytes:
    """
    –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.
    """
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Pillow
        image = Image.open(BytesIO(image_data))
        
        # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏
        enhancer = ImageEnhance.Contrast(image)
        image = enhancer.enhance(2.0)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å –≤ 2 —Ä–∞–∑–∞
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ grayscale
        image = image.convert('L')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ BytesIO
        output = BytesIO()
        image.save(output, format='JPEG', quality=85)
        output.seek(0)
        
        return output.getvalue()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        raise

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"))
    markup.add(KeyboardButton("üì¶ –ö–∞—Ç–∞–ª–æ–≥"), KeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç"))
    markup.add(KeyboardButton("üì∑ –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —à—Ç—Ä–∏—Ö–∫–æ–¥"))
    markup.add(KeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É"), KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫"))
    return markup

def catalog_menu(product_id: int):
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{product_id}"),
        InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{product_id}")
    )
    return markup

def order_menu(order_id: int):
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton("üì¶ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å", callback_data=f"view_order_{order_id}"),
        InlineKeyboardButton("üì§ –í—ã–≥—Ä—É–∑–∏—Ç—å –≤ Excel", callback_data=f"export_order_{order_id}")
    )
    return markup

@bot.message_handler(commands=['start'])
def handle_start(message):
    try:
        logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.chat.id}")
        bot.send_message(
            message.chat.id,
            "üè™ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏!",
            reply_markup=main_menu()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {e}")

@bot.message_handler(func=lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
def start_add_product(message):
    try:
        user_states[message.chat.id] = {'step': 'awaiting_product_data'}
        bot.send_message(
            message.chat.id,
            "üìù –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–®—Ç—Ä–∏—Ö–∫–æ–¥ | –ù–∞–∑–≤–∞–Ω–∏–µ | –¶–µ–Ω–∞\n–ü—Ä–∏–º–µ—Ä: 46207657112 | –ú–æ–ª–æ–∫–æ 3.2% | 89.99"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")

@bot.message_handler(func=lambda m: user_states.get(m.chat.id, {}).get('step') == 'awaiting_product_data')
def process_product_data(message):
    try:
        data = [x.strip() for x in message.text.split('|')]
        if len(data) != 3:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
        
        barcode, name, price = data
        price = float(price)
        
        user_states[message.chat.id] = {
            'step': 'awaiting_product_image',
            'product_data': (barcode, name, price)
        }
        bot.send_message(message.chat.id, "üì∑ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!")
        del user_states[message.chat.id]

@bot.message_handler(content_types=['photo'], func=lambda m: user_states.get(m.chat.id, {}).get('step') == 'awaiting_product_image')
def process_product_image(message):
    try:
        product_data = user_states[message.chat.id]['product_data']
        image_id = message.photo[-1].file_id
        
        with psycopg2.connect(DB_URL, sslmode="require") as conn:
            with conn.cursor() as cursor:
                cursor.execute(
                    "INSERT INTO products (telegram_id, barcode, name, price, image_id) VALUES (%s, %s, %s, %s, %s)",
                    (message.chat.id, *product_data, image_id)
                )
                conn.commit()
        
        bot.send_message(message.chat.id, "‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=main_menu())
        
    except psycopg2.errors.UniqueViolation:
        logger.error("–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç —à—Ç—Ä–∏—Ö–∫–æ–¥–∞")
        bot.send_message(message.chat.id, "‚ùå –≠—Ç–æ—Ç —à—Ç—Ä–∏—Ö–∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞!")
    finally:
        user_states.pop(message.chat.id, None)

@bot.message_handler(func=lambda m: m.text == "üì¶ –ö–∞—Ç–∞–ª–æ–≥")
def show_catalog(message):
    try:
        with psycopg2.connect(DB_URL, sslmode="require") as conn:
            with conn.cursor() as cursor:
                cursor.execute(
                    "SELECT id, barcode, name, price, image_id FROM products WHERE telegram_id = %s ORDER BY created_at DESC",
                    (message.chat.id,)
                )
                products = cursor.fetchall()
        
        if not products:
            bot.send_message(message.chat.id, "üõí –í–∞—à –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –ø—É—Å—Ç")
            return
        
        for product in products:
            product_id, barcode, name, price, image_id = product
            caption = f"üì¶ {name}\nüîñ –®—Ç—Ä–∏—Ö–∫–æ–¥: {barcode}\nüí∞ –¶–µ–Ω–∞: {price} —Ä—É–±."
            
            if image_id:
                bot.send_photo(
                    message.chat.id,
                    image_id,
                    caption=caption,
                    reply_markup=catalog_menu(product_id)
                )
            else:
                bot.send_message(
                    message.chat.id,
                    caption,
                    reply_markup=catalog_menu(product_id)
                )
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞")

@bot.message_handler(func=lambda m: m.text == "üì∑ –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —à—Ç—Ä–∏—Ö–∫–æ–¥")
def handle_scan(message):
    try:
        user_states[message.chat.id] = {'step': 'awaiting_barcode_scan'}
        bot.send_message(
            message.chat.id,
            "üì∑ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ —à—Ç—Ä–∏—Ö–∫–æ–¥ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:",
            reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("–û—Ç–º–µ–Ω–∞"))
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

@bot.message_handler(content_types=['photo'], func=lambda m: user_states.get(m.chat.id, {}).get('step') == 'awaiting_barcode_scan')
def process_barcode_scan(message):
    try:
        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        processed_image = preprocess_image(downloaded_file)
        
        # –°–∂–∞—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)
        compressed_image = compress_image(processed_image)
        logger.debug(f"–†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è OCR: {len(compressed_image)} –±–∞–π—Ç")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ OCR API
        max_retries = 3
        retry_delay = 5  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        barcode = None

        for attempt in range(max_retries):
            try:
                response = requests.post(
                    'https://api.ocr.space/parse/image',
                    files={'image': ('barcode.jpg', compressed_image, 'image/jpeg')},
                    data={'apikey': OCR_API_KEY, 'OCREngine': 2},
                    timeout=30
                )
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
                if response.status_code != 200:
                    logger.error(f"HTTP Error {response.status_code}: {response.text}")
                    raise Exception(f"HTTP Error {response.status_code}")
                
                result = response.json()
                logger.info(f"–û—Ç–≤–µ—Ç OCR: {json.dumps(result, indent=2)}")  # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–∞
                if not result.get('ParsedResults'):
                    logger.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç OCR API: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ParsedResults")
                    raise Exception("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç OCR API")
                
                parsed_text = result['ParsedResults'][0].get('ParsedText', '')
                logger.info(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {parsed_text}")

                # –£–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∏ –ø—Ä–æ–±–µ–ª—ã
                cleaned_text = parsed_text.replace("\n", "").replace(" ", "")
                logger.info(f"–û—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {cleaned_text}")

                # –ü–æ–∏—Å–∫ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞
                numbers = [word.strip() for word in cleaned_text.split() if word.strip().isdigit()]
                valid_barcodes = [num for num in numbers if 8 <= len(num) <= 15]
                
                if valid_barcodes:
                    barcode = max(valid_barcodes, key=len)
                    logger.info(f"–ù–∞–π–¥–µ–Ω —à—Ç—Ä–∏—Ö–∫–æ–¥: {barcode}")
                    break  # –£—Å–ø–µ—à–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
                else:
                    logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}: –®—Ç—Ä–∏—Ö–∫–æ–¥ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω")
                    if attempt < max_retries - 1:
                        time.sleep(retry_delay)
            except Exception as e:
                logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")
                if attempt < max_retries - 1:
                    time.sleep(retry_delay)
                else:
                    raise  # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if barcode:
            # –ü–æ–∏—Å–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            with psycopg2.connect(DB_URL, sslmode="require") as conn:
                with conn.cursor() as cursor:
                    cursor.execute(
                        "SELECT name, price FROM products WHERE barcode = %s AND telegram_id = %s",
                        (barcode, message.chat.id)
                    )
                    product = cursor.fetchone()
            
            response_text = f"‚úÖ –®—Ç—Ä–∏—Ö–∫–æ–¥: `{barcode}`"
            if product:
                response_text += f"\nüì¶ –¢–æ–≤–∞—Ä: {product[0]}\nüí∞ –¶–µ–Ω–∞: {product[1]} —Ä—É–±."
            else:
                response_text += "\n‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ"
        else:
            response_text = "‚ùå –®—Ç—Ä–∏—Ö–∫–æ–¥ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ —á–µ—Ç–∫–æ–µ —Ñ–æ—Ç–æ"

        bot.send_message(
            message.chat.id,
            response_text,
            parse_mode='Markdown',
            reply_markup=main_menu()
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}", exc_info=True)
        bot.send_message(
            message.chat.id,
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}",
            reply_markup=main_menu()
        )
    finally:
        user_states.pop(message.chat.id, None)

@bot.message_handler(func=lambda m: m.text == "üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É")
def create_order(message):
    try:
        user_states[message.chat.id] = {'step': 'awaiting_order_name'}
        bot.send_message(
            message.chat.id,
            "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏:"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")

@bot.message_handler(func=lambda m: user_states.get(m.chat.id, {}).get('step') == 'awaiting_order_name')
def process_order_name(message):
    try:
        order_name = message.text.strip()
        if not order_name:
            raise ValueError("–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        
        with psycopg2.connect(DB_URL, sslmode="require") as conn:
            with conn.cursor() as cursor:
                cursor.execute(
                    "INSERT INTO orders (telegram_id, name) VALUES (%s, %s) RETURNING id",
                    (message.chat.id, order_name)
                )
                order_id = cursor.fetchone()[0]
                conn.commit()
        
        user_states[message.chat.id] = {
            'step': 'awaiting_order_barcode',
            'order_id': order_id
        }
        bot.send_message(
            message.chat.id,
            "üì¶ –í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã —à—Ç—Ä–∏—Ö–∫–æ–¥–∞ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∑–∞—è–≤–∫—É:"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        del user_states[message.chat.id]

@bot.message_handler(func=lambda m: user_states.get(m.chat.id, {}).get('step') == 'awaiting_order_barcode')
def process_order_barcode(message):
    try:
        last_four_digits = message.text.strip()
        if not last_four_digits.isdigit() or len(last_four_digits) != 4:
            raise ValueError("–í–≤–µ–¥–∏—Ç–µ —Ä–æ–≤–Ω–æ 4 —Ü–∏—Ñ—Ä—ã")
        
        order_id = user_states[message.chat.id]['order_id']
        
        with psycopg2.connect(DB_URL, sslmode="require") as conn:
            with conn.cursor() as cursor:
                cursor.execute(
                    "SELECT id, name, price FROM products WHERE telegram_id = %s AND barcode LIKE %s",
                    (message.chat.id, f"%{last_four_digits}")
                )
                product = cursor.fetchone()
                
                if product:
                    product_id, name, price = product
                    cursor.execute(
                        "INSERT INTO order_items (order_id, product_id) VALUES (%s, %s)",
                        (order_id, product_id)
                    )
                    conn.commit()
                    bot.send_message(
                        message.chat.id,
                        f"‚úÖ –¢–æ–≤–∞—Ä '{name}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞—è–≤–∫—É!",
                        reply_markup=main_menu()
                    )
                else:
                    bot.send_message(
                        message.chat.id,
                        "‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                        reply_markup=main_menu()
                    )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞: {e}")
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —Ä–æ–≤–Ω–æ 4 —Ü–∏—Ñ—Ä—ã")
    finally:
        user_states.pop(message.chat.id, None)

@bot.message_handler(func=lambda m: m.text == "üìã –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫")
def list_orders(message):
    try:
        with psycopg2.connect(DB_URL, sslmode="require") as conn:
            with conn.cursor() as cursor:
                cursor.execute(
                    "SELECT id, name, created_at FROM orders WHERE telegram_id = %s ORDER BY created_at DESC",
                    (message.chat.id,)
                )
                orders = cursor.fetchall()
        
        if not orders:
            bot.send_message(message.chat.id, "üìã –£ –≤–∞—Å –Ω–µ—Ç –∑–∞—è–≤–æ–∫.")
            return
        
        for order in orders:
            order_id, name, created_at = order
            bot.send_message(
                message.chat.id,
                f"üìã –ó–∞—è–≤–∫–∞: {name}\nüïí –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {created_at.strftime('%Y-%m-%d %H:%M')}",
                reply_markup=order_menu(order_id)
            )
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫: {e}")
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫")

@bot.callback_query_handler(func=lambda call: call.data.startswith(('view_order_', 'export_order_')))
def handle_order_callback(call):
    try:
        action, order_id = call.data.split('_')
        order_id = int(order_id)
        
        if action == 'view':
            with psycopg2.connect(DB_URL, sslmode="require") as conn:
                with conn.cursor() as cursor:
                    cursor.execute(
                        "SELECT p.name, p.price, oi.quantity FROM order_items oi "
                        "JOIN products p ON oi.product_id = p.id "
                        "WHERE oi.order_id = %s",
                        (order_id,)
                    )
                    items = cursor.fetchall()
            
            if not items:
                bot.send_message(call.message.chat.id, "üõí –ó–∞—è–≤–∫–∞ –ø—É—Å—Ç–∞.")
                return
            
            response_text = "üì¶ –¢–æ–≤–∞—Ä—ã –≤ –∑–∞—è–≤–∫–µ:\n"
            for item in items:
                name, price, quantity = item
                response_text += f"üì¶ {name} - {price} —Ä—É–±. x {quantity}\n"
            
            bot.send_message(call.message.chat.id, response_text)
            
        elif action == 'export':
            with psycopg2.connect(DB_URL, sslmode="require") as conn:
                with conn.cursor() as cursor:
                    cursor.execute(
                        "SELECT p.name, p.price, oi.quantity FROM order_items oi "
                        "JOIN products p ON oi.product_id = p.id "
                        "WHERE oi.order_id = %s",
                        (order_id,)
                    )
                    items = cursor.fetchall()
            
            if not items:
                bot.send_message(call.message.chat.id, "üõí –ó–∞—è–≤–∫–∞ –ø—É—Å—Ç–∞.")
                return
            
            wb = Workbook()
            ws = wb.active
            ws.title = "–ó–∞—è–≤–∫–∞"
            ws.append(["–ù–∞–∑–≤–∞–Ω–∏–µ", "–¶–µ–Ω–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"])
            
            for item in items:
                name, price, quantity = item
                ws.append([name, price, quantity])
            
            filename = f"order_{order_id}.xlsx"
            wb.save(filename)
            
            with open(filename, "rb") as f:
                bot.send_document(
                    call.message.chat.id,
                    f,
                    caption="üì§ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel"
                )
            
            os.remove(filename)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
        bot.send_message(call.message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞
    port = int(os.environ.get("PORT", 10000))
    Thread(target=app.run, kwargs={
        'host': '0.0.0.0',
        'port': port,
        'debug': False,
        'use_reloader': False
    }).start()
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    while True:
        try:
            bot.polling(none_stop=True, interval=3, timeout=30)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            time.sleep(10)
