import os
import logging
import time
import requests
import psycopg2
import telebot
from flask import Flask
from PIL import Image, ImageEnhance, UnidentifiedImageError
from io import BytesIO
from threading import Thread
from openpyxl import Workbook
from telebot.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
bot = telebot.TeleBot(TOKEN)
DB_URL = os.getenv("DATABASE_URL")
OCR_API_KEY = os.getenv("OCR_API_KEY")
MAX_IMAGE_SIZE_MB = 1
user_states = {}
CACHE_TIMEOUT = 300  # 5 –º–∏–Ω—É—Ç

def get_db_connection():
    return psycopg2.connect(DB_URL, sslmode="require")

def init_db():
    commands = (
        """CREATE TABLE IF NOT EXISTS products (
            id SERIAL PRIMARY KEY,
            telegram_id BIGINT NOT NULL,
            barcode TEXT NOT NULL UNIQUE,
            name TEXT NOT NULL,
            price FLOAT NOT NULL,
            image_id TEXT,
            created_at TIMESTAMP DEFAULT NOW()
        )""",
        """CREATE TABLE IF NOT EXISTS orders (
            id SERIAL PRIMARY KEY,
            telegram_id BIGINT NOT NULL,
            name TEXT NOT NULL,
            created_at TIMESTAMP DEFAULT NOW()
        )""",
        """CREATE TABLE IF NOT EXISTS order_items (
            id SERIAL PRIMARY KEY,
            order_id INT NOT NULL REFERENCES orders(id) ON DELETE CASCADE,
            product_id INT NOT NULL REFERENCES products(id) ON DELETE CASCADE,
            quantity INT NOT NULL DEFAULT 1,
            price FLOAT NOT NULL,
            created_at TIMESTAMP DEFAULT NOW()
        )"""
    )
    with get_db_connection() as conn:
        with conn.cursor() as cursor:
            for command in commands:
                cursor.execute(command)
        conn.commit()

init_db()

app = Flask(__name__)

@app.route('/')
def home():
    return "Telegram Bot is Running"

def compress_image(image_data: bytes) -> bytes:
    try:
        if len(image_data) <= MAX_IMAGE_SIZE_MB * 1024 * 1024:
            return image_data

        with Image.open(BytesIO(image_data)) as img:
            if img.mode != 'RGB':
                img = img.convert('RGB')
            
            output = BytesIO()
            quality = 85
            
            while quality >= 50:
                output.seek(0)
                output.truncate(0)
                img.save(output, format='JPEG', quality=quality, optimize=True)
                if output.getbuffer().nbytes <= MAX_IMAGE_SIZE_MB * 1024 * 1024:
                    break
                quality -= 5
            
            return output.getvalue()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è: {e}")
        raise

def preprocess_image(image_data: bytes) -> bytes:
    try:
        with Image.open(BytesIO(image_data)) as img:
            enhancer = ImageEnhance.Contrast(img)
            return enhancer.enhance(2.0).convert('L').tobytes()
    except UnidentifiedImageError:
        logger.error("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        raise

def main_menu():
    return ReplyKeyboardMarkup(resize_keyboard=True).add(
        KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"),
        KeyboardButton("üì¶ –ö–∞—Ç–∞–ª–æ–≥"),
        KeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç"),
        KeyboardButton("üì∑ –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —à—Ç—Ä–∏—Ö–∫–æ–¥"),
        KeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É"),
        KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫")
    )

def catalog_menu(product_id: int):
    return InlineKeyboardMarkup().row(
        InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{product_id}"),
        InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{product_id}")
    )

def order_menu(order_id: int):
    return InlineKeyboardMarkup().row(
        InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_order_{order_id}"),
        InlineKeyboardButton("üì§ –í—ã–≥—Ä—É–∑–∏—Ç—å", callback_data=f"export_order_{order_id}"),
        InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_order_{order_id}")
    )

@bot.message_handler(commands=['start'])
def handle_start(message):
    try:
        bot.send_message(message.chat.id, "üè™ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=main_menu())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_'))
def handle_delete_product(call):
    try:
        product_id = call.data.split('_')[1]
        with get_db_connection() as conn:
            with conn.cursor() as cur:
                cur.execute("DELETE FROM products WHERE id = %s", (product_id,))
                conn.commit()
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.answer_callback_query(call.id, "‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è!")

@bot.callback_query_handler(func=lambda call: call.data.startswith('edit_'))
def handle_edit_product(call):
    try:
        product_id = call.data.split('_')[1]
        user_states[call.message.chat.id] = {
            'step': 'edit_product',
            'product_id': product_id,
            'time': time.time()
        }
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ | –¶–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞!")

@bot.message_handler(func=lambda m: user_states.get(m.chat.id, {}).get('step') == 'edit_product')
def process_edit_product(message):
    try:
        product_id = user_states[message.chat.id]['product_id']
        name, price = map(str.strip, message.text.split('|', 1))
        
        with get_db_connection() as conn:
            with conn.cursor() as cur:
                cur.execute("""
                    UPDATE products 
                    SET name = %s, price = %s 
                    WHERE id = %s
                """, (name, float(price), product_id))
                conn.commit()
        
        bot.send_message(message.chat.id, "‚úÖ –¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω!", reply_markup=main_menu())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞!")
    finally:
        user_states.pop(message.chat.id, None)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—è–≤–æ–∫
@bot.message_handler(func=lambda m: m.text == "üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É")
def create_order(message):
    try:
        user_states[message.chat.id] = {'step': 'create_order_name', 'time': time.time()}
        bot.send_message(message.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏:")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")

@bot.message_handler(func=lambda m: user_states.get(m.chat.id, {}).get('step') == 'create_order_name')
def process_order_name(message):
    try:
        order_name = message.text.strip()
        if not order_name:
            raise ValueError("–ü—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
        
        with get_db_connection() as conn:
            with conn.cursor() as cur:
                cur.execute("""
                    INSERT INTO orders (telegram_id, name)
                    VALUES (%s, %s) RETURNING id
                """, (message.chat.id, order_name))
                order_id = cur.fetchone()[0]
                conn.commit()
        
        user_states[message.chat.id] = {
            'step': 'order_management',
            'order_id': order_id,
            'time': time.time()
        }
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —à—Ç—Ä–∏—Ö–∫–æ–¥", "‚å®Ô∏è –í–≤–µ—Å—Ç–∏ 4 —Ü–∏—Ñ—Ä—ã", "üîô –ó–∞–≤–µ—Ä—à–∏—Ç—å")
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è!")
        user_states.pop(message.chat.id, None)

@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_order_'))
def handle_delete_order(call):
    try:
        order_id = call.data.split('_')[2]
        with get_db_connection() as conn:
            with conn.cursor() as cur:
                cur.execute("DELETE FROM orders WHERE id = %s", (order_id,))
                conn.commit()
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.answer_callback_query(call.id, "‚úÖ –ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è!")

@bot.callback_query_handler(func=lambda call: call.data.startswith('export_order_'))
def export_order(call):
    try:
        order_id = call.data.split('_')[2]
        with get_db_connection() as conn:
            with conn.cursor() as cur:
                cur.execute("""
                    SELECT p.name, oi.quantity, oi.price 
                    FROM order_items oi
                    JOIN products p ON oi.product_id = p.id
                    WHERE oi.order_id = %s
                """, (order_id,))
                items = cur.fetchall()

        wb = Workbook()
        ws = wb.active
        ws.append(["–ù–∞–∑–≤–∞–Ω–∏–µ", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–¶–µ–Ω–∞"])
        for item in items:
            ws.append(item)
        
        filename = f"order_{order_id}.xlsx"
        wb.save(filename)
        
        with open(filename, 'rb') as f:
            bot.send_document(call.message.chat.id, f, caption="üì§ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞—è–≤–∫–∏")
        
        os.remove(filename)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
@bot.message_handler(content_types=['photo'], func=lambda m: user_states.get(m.chat.id, {}).get('step') == 'order_scan')
def process_order_scan(message):
    try:
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        
        try:
            processed_image = preprocess_image(downloaded_file)
            compressed_image = compress_image(processed_image)
        except UnidentifiedImageError:
            raise Exception("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

        response = requests.post(
            'https://api.ocr.space/parse/image',
            files={'image': ('barcode.jpg', compressed_image, 'image/jpeg')},
            data={'apikey': OCR_API_KEY, 'OCREngine': 2},
            timeout=20
        )
        
        if response.status_code != 200:
            raise Exception(f"–û—à–∏–±–∫–∞ API: {response.status_code}")
            
        result = response.json()
        
        if result.get('IsErroredOnProcessing', False):
            errors = result.get('ErrorMessage', ['Unknown error'])
            raise Exception(f"–û—à–∏–±–∫–∞ OCR: {errors}")
            
        parsed_text = result.get('ParsedResults', [{}])[0].get('ParsedText', '')
        numbers = [word.strip() for word in parsed_text.split() if word.strip().isdigit()]
        valid_barcodes = [num for num in numbers if 8 <= len(num) <= 15]
        
        if not valid_barcodes:
            raise Exception("–®—Ç—Ä–∏—Ö–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
        barcode = max(valid_barcodes, key=len)

        with get_db_connection() as conn:
            with conn.cursor() as cur:
                cur.execute("""
                    SELECT id, price FROM products 
                    WHERE barcode = %s AND telegram_id = %s
                """, (barcode, message.chat.id))
                product = cur.fetchone()
                
                if product:
                    user_states[message.chat.id].update({
                        'step': 'add_quantity',
                        'product_id': product[0],
                        'default_price': product[1]
                    })
                    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Ü–µ–Ω—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 –∏ —Ü–µ–Ω–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞):")
                else:
                    bot.send_message(message.chat.id, f"‚ùå –¢–æ–≤–∞—Ä —Å –∫–æ–¥–æ–º {barcode} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        user_states.pop(message.chat.id, None)

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    Thread(target=app.run, kwargs={
        'host': '0.0.0.0',
        'port': port,
        'debug': False,
        'use_reloader': False
    }).start()
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.infinity_polling()
