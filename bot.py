import os
import logging
import telebot
import psycopg2
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
DB_URL = os.getenv("DATABASE_URL")

if not TOKEN or not DB_URL:
    raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –∏–ª–∏ DATABASE_URL")

bot = telebot.TeleBot(TOKEN)
conn = psycopg2.connect(DB_URL, sslmode="require")

# –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
with conn:
    with conn.cursor() as cursor:
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS supervisors (
            id SERIAL PRIMARY KEY,
            telegram_id BIGINT UNIQUE,
            username TEXT UNIQUE,
            password TEXT
        );
        """)
        cursor.execute("""
        CREATE TABLE IF NOT EXISTS products (
            id SERIAL PRIMARY KEY,
            supervisor_id INT REFERENCES supervisors(id) ON DELETE CASCADE,
            barcode TEXT,
            name TEXT,
            price FLOAT,
            image_url TEXT
        );
        """)

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
def is_authorized(user_id):
    with conn.cursor() as cursor:
        cursor.execute("SELECT id FROM supervisors WHERE telegram_id = %s", (user_id,))
        return cursor.fetchone() is not None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start_message(message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("üîë –í–æ–π—Ç–∏"))
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç —Å—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä–∞. –í–æ–π–¥–∏—Ç–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ (–∑–∞–ø—Ä–æ—Å –ª–æ–≥–∏–Ω–∞)
@bot.message_handler(func=lambda message: message.text == "üîë –í–æ–π—Ç–∏")
def login_request(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:")
    bot.register_next_step_handler(message, login_process)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞
def login_process(message):
    username = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
    bot.register_next_step_handler(message, lambda msg: check_credentials(msg, username))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è
def check_credentials(message, username):
    password = message.text
    with conn.cursor() as cursor:
        cursor.execute("SELECT id FROM supervisors WHERE username = %s AND password = %s", (username, password))
        supervisor = cursor.fetchone()
        if supervisor:
            cursor.execute("UPDATE supervisors SET telegram_id = %s WHERE id = %s", (message.chat.id, supervisor[0]))
            conn.commit()
            bot.send_message(message.chat.id, "‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥! –í—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞—Ç–∞–ª–æ–≥–æ–º —Ç–æ–≤–∞—Ä–æ–≤.")
        else:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_product
@bot.message_handler(commands=['add_product'])
def add_product(message):
    if not is_authorized(message.chat.id):
        bot.send_message(message.chat.id, "‚õî –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã!")
        return
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —à—Ç—Ä–∏—Ö–∫–æ–¥ —Ç–æ–≤–∞—Ä–∞:")
    bot.register_next_step_handler(message, process_barcode)

# –í–≤–æ–¥ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞
def process_barcode(message):
    barcode = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    bot.register_next_step_handler(message, lambda msg: process_name(msg, barcode))

# –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
def process_name(message, barcode):
    name = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:")
    bot.register_next_step_handler(message, lambda msg: process_price(msg, barcode, name))

# –í–≤–æ–¥ —Ü–µ–Ω—ã
def process_price(message, barcode, name):
    try:
        price = float(message.text)
        with conn.cursor() as cursor:
            cursor.execute("SELECT id FROM supervisors WHERE telegram_id = %s", (message.chat.id,))
            supervisor = cursor.fetchone()
            if supervisor:
                cursor.execute("""
                INSERT INTO products (supervisor_id, barcode, name, price)
                VALUES (%s, %s, %s, %s)
                """, (supervisor[0], barcode, name, price))
                conn.commit()
                bot.send_message(message.chat.id, "‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
            else:
                bot.send_message(message.chat.id, "‚õî –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!")
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
try:
    bot.polling(none_stop=True, skip_pending=True)
finally:
    conn.close()
