import os
import asyncio
import logging
import psycopg2
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CallbackQueryHandler, CommandHandler, MessageHandler, filters

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Supabase (PostgreSQL)
DB_URL = os.getenv("DATABASE_URL")
conn = psycopg2.connect(DB_URL)
cur = conn.cursor()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
active_users = {}
admin_id = int(os.getenv("ADMIN_ID"))  # ID –∞–¥–º–∏–Ω–∞

# === –§–£–ù–ö–¶–ò–ò –†–ê–ë–û–¢–´ –° –ë–î ===

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä–æ–º
def is_supervisor(user_id):
    cur.execute("SELECT COUNT(*) FROM supervisors WHERE user_id = %s", (user_id,))
    return cur.fetchone()[0] > 0

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä–∞
def add_supervisor(user_id):
    cur.execute("INSERT INTO supervisors (user_id) VALUES (%s) ON CONFLICT DO NOTHING", (user_id,))
    conn.commit()

# –£–¥–∞–ª–µ–Ω–∏–µ —Å—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä–∞
def remove_supervisor(user_id):
    cur.execute("DELETE FROM supervisors WHERE user_id = %s", (user_id,))
    conn.commit()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–æ–≤–∞—Ä–æ–≤
def get_catalog():
    cur.execute("SELECT id, name, price FROM catalog")
    products = cur.fetchall()
    return products

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
def add_order(user_id, items):
    cur.execute("INSERT INTO orders (user_id, items, created_at) VALUES (%s, %s, %s)", (user_id, str(items), datetime.now()))
    conn.commit()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤
def get_orders():
    cur.execute("SELECT id, user_id, items FROM orders ORDER BY created_at DESC")
    return cur.fetchall()

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu():
    keyboard = [
        [InlineKeyboardButton("üì¶ –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog")],
        [InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="cart")],
        [InlineKeyboardButton("üìú –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="order")],
    ]
    return InlineKeyboardMarkup(keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context):
    user_id = update.message.chat_id
    active_users[user_id] = datetime.now() + timedelta(minutes=5)  # –¢–∞–π–º–µ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    text = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–∫–∞–∑–æ–≤. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:"
    if user_id == admin_id:
        text += "\nüîπ –¢—ã –∞–¥–º–∏–Ω, –¥–æ—Å—Ç—É–ø–Ω–æ: /add_supervisor, /del_supervisor, /orders"
    elif is_supervisor(user_id):
        text += "\nüîπ –¢—ã —Å—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä, –º–æ–∂–µ—à—å —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–∫–∞–∑–∞–º–∏."
    await update.message.reply_text(text, reply_markup=get_main_menu())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    if query.data == "catalog":
        products = get_catalog()
        text = "üì¶ –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤:\n" + "\n".join([f"{p[0]}. {p[1]} - {p[2]}‚Ç∏" for p in products])
        await query.edit_message_text(text, reply_markup=get_main_menu())

    elif query.data == "cart":
        await query.edit_message_text("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=get_main_menu())

    elif query.data == "order":
        await query.edit_message_text("üìú –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å.", reply_markup=get_main_menu())

# === –ê–î–ú–ò–ù-–ö–û–ú–ê–ù–î–´ ===

# –î–æ–±–∞–≤–∏—Ç—å —Å—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä–∞
async def add_supervisor_cmd(update: Update, context):
    if update.message.chat_id != admin_id:
        return
    if len(context.args) == 0:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /add_supervisor [user_id]")
        return
    user_id = int(context.args[0])
    add_supervisor(user_id)
    await update.message.reply_text(f"‚úÖ –°—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä {user_id} –¥–æ–±–∞–≤–ª–µ–Ω.")

# –£–¥–∞–ª–∏—Ç—å —Å—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä–∞
async def del_supervisor_cmd(update: Update, context):
    if update.message.chat_id != admin_id:
        return
    if len(context.args) == 0:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /del_supervisor [user_id]")
        return
    user_id = int(context.args[0])
    remove_supervisor(user_id)
    await update.message.reply_text(f"‚úÖ –°—É–ø–µ—Ä–≤–∞–π–∑–µ—Ä {user_id} —É–¥–∞–ª—ë–Ω.")

# –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã
async def show_orders(update: Update, context):
    if update.message.chat_id != admin_id and not is_supervisor(update.message.chat_id):
        return
    orders = get_orders()
    if not orders:
        await update.message.reply_text("‚ùå –ó–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç.")
        return
    text = "\n".join([f"üì¶ –ó–∞–∫–∞–∑ {o[0]} –æ—Ç {o[1]}: {o[2]}" for o in orders])
    await update.message.reply_text(f"üìú –í—Å–µ –∑–∞–∫–∞–∑—ã:\n{text}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def check_inactive_users():
    while True:
        now = datetime.now()
        to_remove = [user for user, timeout in active_users.items() if now > timeout]
        for user in to_remove:
            del active_users[user]
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –æ—Ç–∫–ª—é—á–µ–Ω –∏–∑-–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")
        await asyncio.sleep(60)

# === –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ===
async def main():
    app = Application.builder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(CommandHandler("add_supervisor", add_supervisor_cmd))
    app.add_handler(CommandHandler("del_supervisor", del_supervisor_cmd))
    app.add_handler(CommandHandler("orders", show_orders))

    # –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    asyncio.create_task(check_inactive_users())

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await app.run_polling()

# –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    asyncio.run(main())
