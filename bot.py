import os
import logging
import time
import requests
import psycopg2
import telebot
from flask import Flask
from PIL import Image, ImageEnhance
from io import BytesIO
from threading import Thread
from openpyxl import Workbook
from telebot.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
bot = telebot.TeleBot(TOKEN)
DB_URL = os.getenv("DATABASE_URL")
OCR_API_KEY = os.getenv("OCR_API_KEY")
MAX_IMAGE_SIZE_MB = 1
user_states = {}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    commands = (
        """
        CREATE TABLE IF NOT EXISTS products (
            id SERIAL PRIMARY KEY,
            telegram_id BIGINT NOT NULL,
            barcode TEXT NOT NULL UNIQUE,
            name TEXT NOT NULL,
            price FLOAT NOT NULL,
            image_id TEXT,
            created_at TIMESTAMP DEFAULT NOW()
        )
        """,
        """
        CREATE TABLE IF NOT EXISTS orders (
            id SERIAL PRIMARY KEY,
            telegram_id BIGINT NOT NULL,
            name TEXT NOT NULL,
            created_at TIMESTAMP DEFAULT NOW()
        )
        """,
        """
        CREATE TABLE IF NOT EXISTS order_items (
            id SERIAL PRIMARY KEY,
            order_id INT NOT NULL REFERENCES orders(id) ON DELETE CASCADE,
            product_id INT NOT NULL REFERENCES products(id) ON DELETE CASCADE,
            quantity INT NOT NULL DEFAULT 1,
            created_at TIMESTAMP DEFAULT NOW()
        )
        """
    )
    try:
        with psycopg2.connect(DB_URL, sslmode="require") as conn:
            with conn.cursor() as cursor:
                for command in commands:
                    cursor.execute(command)
            conn.commit()
        logger.info("–¢–∞–±–ª–∏—Ü—ã –ë–î —Å–æ–∑–¥–∞–Ω—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ë–î: {e}")
        raise

init_db()

app = Flask(__name__)

@app.route('/')
def home():
    return "Bot is running"

#region Image Processing
def compress_image(image_data: bytes) -> bytes:
    if len(image_data) <= MAX_IMAGE_SIZE_MB * 1024 * 1024:
        return image_data
    try:
        with Image.open(BytesIO(image_data)) as img:
            if img.mode != 'RGB': img = img.convert('RGB')
            output = BytesIO()
            quality = 85
            while True:
                output.seek(0)
                output.truncate()
                img.save(output, format='JPEG', quality=quality, optimize=True)
                if len(output.getvalue()) <= MAX_IMAGE_SIZE_MB * 1024 * 1024: break
                quality -= 5
                if quality < 50: break
            return output.getvalue()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è: {e}")
        raise

def preprocess_image(image_data: bytes) -> bytes:
    try:
        image = Image.open(BytesIO(image_data))
        enhancer = ImageEnhance.Contrast(image)
        image = enhancer.enhance(2.0).convert('L')
        output = BytesIO()
        image.save(output, format='JPEG', quality=85)
        return output.getvalue()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        raise
#endregion

#region Keyboards
def main_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", "üì¶ –ö–∞—Ç–∞–ª–æ–≥")
    markup.add("üì∑ –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å", "üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É")
    markup.add("üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏", "üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
    return markup

def catalog_menu(product_id: int):
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{product_id}"),
        InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{product_id}")
    )
    return markup

def order_actions_menu(order_id: int):
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"rename_order_{order_id}"),
        InlineKeyboardButton("üì¶ –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã", callback_data=f"add_to_order_{order_id}")
    )
    markup.row(
        InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"delete_order_{order_id}"),
        InlineKeyboardButton("üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel", callback_data=f"export_order_{order_id}")
    )
    return markup
#endregion

#region Product Handlers
@bot.message_handler(func=lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
def add_product_start(message):
    user_states[message.chat.id] = {'step': 'awaiting_product_data'}
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–®—Ç—Ä–∏—Ö–∫–æ–¥ | –ù–∞–∑–≤–∞–Ω–∏–µ | –¶–µ–Ω–∞")

@bot.message_handler(func=lambda m: user_states.get(m.chat.id, {}).get('step') == 'awaiting_product_data')
def process_product_data(message):
    try:
        data = [x.strip() for x in message.text.split('|')]
        if len(data) != 3: raise ValueError
        barcode, name, price = data
        user_states[message.chat.id] = {
            'step': 'awaiting_product_image',
            'product_data': (barcode, name, float(price))
        }
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ üì∏")
    except:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!")
        del user_states[message.chat.id]

@bot.message_handler(content_types=['photo'], func=lambda m: user_states.get(m.chat.id, {}).get('step') == 'awaiting_product_image')
def process_product_image(message):
    try:
        product_data = user_states[message.chat.id]['product_data']
        image_id = message.photo[-1].file_id
        with psycopg2.connect(DB_URL, sslmode="require") as conn:
            with conn.cursor() as cursor:
                cursor.execute(
                    "INSERT INTO products (telegram_id, barcode, name, price, image_id) VALUES (%s, %s, %s, %s, %s)",
                    (message.chat.id, *product_data, image_id)
                )
                conn.commit()
        bot.send_message(message.chat.id, "‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=main_menu())
    except psycopg2.errors.UniqueViolation:
        bot.send_message(message.chat.id, "‚ùå –¢–∞–∫–æ–π —à—Ç—Ä–∏—Ö–∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!")
    finally:
        user_states.pop(message.chat.id, None)

@bot.callback_query_handler(func=lambda call: call.data.startswith('edit_'))
def edit_product_callback(call):
    try:
        product_id = call.data.split('_')[1]
        user_states[call.message.chat.id] = {
            'step': 'editing_product',
            'product_id': product_id
        }
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ | –¶–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        bot.send_message(call.message.chat.id, "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_'))
def delete_product_callback(call):
    try:
        product_id = call.data.split('_')[1]
        with psycopg2.connect(DB_URL, sslmode="require") as conn:
            with conn.cursor() as cursor:
                cursor.execute("DELETE FROM products WHERE id = %s", (product_id,))
                conn.commit()
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.send_message(call.message.chat.id, "‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        bot.send_message(call.message.chat.id, "‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")

@bot.message_handler(func=lambda m: user_states.get(m.chat.id, {}).get('step') == 'editing_product')
def process_product_edit(message):
    try:
        product_id = user_states[message.chat.id]['product_id']
        new_name, new_price = [x.strip() for x in message.text.split('|')]
        with psycopg2.connect(DB_URL, sslmode="require") as conn:
            with conn.cursor() as cursor:
                cursor.execute(
                    "UPDATE products SET name = %s, price = %s WHERE id = %s",
                    (new_name, float(new_price), product_id)
                conn.commit()
        bot.send_message(message.chat.id, "‚úÖ –¢–æ–≤–∞—Ä –æ–±–Ω–æ–≤–ª–µ–Ω!", reply_markup=main_menu())
    except:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö!")
    finally:
        user_states.pop(message.chat.id, None)
#endregion

#region Catalog
@bot.message_handler(func=lambda m: m.text == "üì¶ –ö–∞—Ç–∞–ª–æ–≥")
def show_catalog(message):
    try:
        with psycopg2.connect(DB_URL, sslmode="require") as conn:
            with conn.cursor() as cursor:
                cursor.execute(
                    "SELECT id, barcode, name, price, image_id FROM products WHERE telegram_id = %s",
                    (message.chat.id,)
                )
                products = cursor.fetchall()
        
        if not products:
            bot.send_message(message.chat.id, "üõçÔ∏è –í–∞—à –∫–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç")
            return

        for product in products:
            product_id, barcode, name, price, image_id = product
            caption = f"üì¶ {name}\nüîñ {barcode}\nüí∞ {price} —Ä—É–±."
            if image_id:
                bot.send_photo(message.chat.id, image_id, caption=caption, reply_markup=catalog_menu(product_id))
            else:
                bot.send_message(message.chat.id, caption, reply_markup=catalog_menu(product_id))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞")
#endregion

#region Orders
@bot.message_handler(func=lambda m: m.text == "üìù –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É")
def create_order_start(message):
    user_states[message.chat.id] = {'step': 'creating_order'}
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏:")

@bot.message_handler(func=lambda m: user_states.get(m.chat.id, {}).get('step') == 'creating_order')
def process_order_creation(message):
    try:
        order_name = message.text.strip()
        with psycopg2.connect(DB_URL, sslmode="require") as conn:
            with conn.cursor() as cursor:
                cursor.execute(
                    "INSERT INTO orders (telegram_id, name) VALUES (%s, %s) RETURNING id",
                    (message.chat.id, order_name)
                )
                order_id = cursor.fetchone()[0]
                conn.commit()
        user_states[message.chat.id] = {'step': 'adding_to_order', 'order_id': order_id}
        bot.send_message(
            message.chat.id,
            "‚úÖ –ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=order_actions_menu(order_id)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏")

@bot.callback_query_handler(func=lambda call: call.data.startswith('add_to_order_'))
def add_to_order_callback(call):
    order_id = call.data.split('_')[-1]
    user_states[call.message.chat.id] = {
        'step': 'awaiting_order_barcode',
        'order_id': order_id
    }
    bot.send_message(call.message.chat.id, "üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Ü–∏—Ñ—Ä—ã:")

@bot.message_handler(func=lambda m: user_states.get(m.chat.id, {}).get('step') == 'awaiting_order_barcode')
def process_order_barcode(message):
    # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞ –¥–ª—è –∑–∞—è–≤–∫–∏
    pass  # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ order_id

# –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—è–≤–æ–∫ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ
#endregion

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    Thread(target=app.run, kwargs={'host':'0.0.0.0','port':port}).start()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    while True:
        try: bot.polling(none_stop=True)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞: {e}")
            time.sleep(10)
