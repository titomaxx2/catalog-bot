import os
import logging
import json
import telebot
import psycopg2
from telebot.types import ReplyKeyboardMarkup, KeyboardButton

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
DB_URL = os.getenv("DATABASE_URL")

if not TOKEN or not DB_URL:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")

bot = telebot.TeleBot(TOKEN)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
def get_db_connection():
    return psycopg2.connect(DB_URL, sslmode="require")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
def init_db():
    commands = (
        """
        CREATE TABLE IF NOT EXISTS supervisors (
            id SERIAL PRIMARY KEY,
            telegram_id BIGINT UNIQUE,
            username TEXT UNIQUE NOT NULL,
            password TEXT NOT NULL,
            is_authorized BOOLEAN DEFAULT FALSE
        )
        """,
        """
        CREATE TABLE IF NOT EXISTS products (
            id SERIAL PRIMARY KEY,
            supervisor_id INT NOT NULL REFERENCES supervisors(id) ON DELETE CASCADE,
            barcode TEXT NOT NULL,
            name TEXT NOT NULL,
            price FLOAT NOT NULL
        )
        """,
        """
        CREATE TABLE IF NOT EXISTS orders (
            id SERIAL PRIMARY KEY,
            supervisor_id INT NOT NULL REFERENCES supervisors(id) ON DELETE CASCADE,
            shop_name TEXT NOT NULL,
            products JSONB NOT NULL,
            created_at TIMESTAMP DEFAULT NOW()
        )
        """
    )
    
    with get_db_connection() as conn:
        with conn.cursor() as cursor:
            for command in commands:
                cursor.execute(command)
        conn.commit()

init_db()

# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ë–î
def authorize_user(telegram_id: int, username: str, password: str) -> bool:
    with get_db_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute(
                "UPDATE supervisors SET telegram_id = %s, is_authorized = TRUE "
                "WHERE username = %s AND password = %s RETURNING id",
                (telegram_id, username, password)
            )
            if cursor.fetchone():
                conn.commit()
                return True
            return False

def is_user_authorized(telegram_id: int) -> bool:
    with get_db_connection() as conn:
        with conn.cursor() as cursor:
            cursor.execute(
                "SELECT id FROM supervisors WHERE telegram_id = %s AND is_authorized = TRUE",
                (telegram_id,)
            )
            return cursor.fetchone() is not None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'])
def handle_start(message):
    bot.send_message(
        message.chat.id,
        "üîë –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (—Ñ–æ—Ä–º–∞—Ç: –ª–æ–≥–∏–Ω –ø–∞—Ä–æ–ª—å)"
    )

@bot.message_handler(func=lambda m: m.text.count(' ') == 1)
def handle_login(message):
    try:
        username, password = message.text.split()
        if authorize_user(message.chat.id, username, password):
            bot.send_message(
                message.chat.id,
                "‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!",
                reply_markup=main_menu()
            )
        else:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        bot.send_message(message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")

def main_menu():
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"))
    markup.add(KeyboardButton("üì¶ –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑"))
    return markup

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
@bot.message_handler(func=lambda m: m.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
def handle_add_product(message):
    if not is_user_authorized(message.chat.id):
        bot.send_message(message.chat.id, "üîí –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!")
        return
    
    bot.send_message(
        message.chat.id,
        "üìù –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<—à—Ç—Ä–∏—Ö–∫–æ–¥>, <–Ω–∞–∑–≤–∞–Ω–∏–µ>, <—Ü–µ–Ω–∞>\n"
        "–ü—Ä–∏–º–µ—Ä: 46207657112, –ú–æ–ª–æ–∫–æ 3.2%, 89.99"
    )
    bot.register_next_step_handler(message, process_product)

def process_product(message):
    try:
        barcode, name, price = map(str.strip, message.text.split(',', 2))
        price = float(price)
        
        with get_db_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute(
                    "INSERT INTO products (supervisor_id, barcode, name, price) "
                    "SELECT id, %s, %s, %s FROM supervisors WHERE telegram_id = %s",
                    (barcode, name, price, message.chat.id)
                )
                conn.commit()
        
        bot.send_message(
            message.chat.id,
            "‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
            reply_markup=main_menu()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
        bot.send_message(
            message.chat.id,
            "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–∫–∞–∑–æ–≤
@bot.message_handler(func=lambda m: m.text == "üì¶ –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑")
def handle_create_order(message):
    if not is_user_authorized(message.chat.id):
        bot.send_message(message.chat.id, "üîí –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!")
        return
    
    bot.send_message(message.chat.id, "üè™ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–∞–≥–∞–∑–∏–Ω–∞:")
    bot.register_next_step_handler(message, process_shop_name)

def process_shop_name(message):
    shop_name = message.text.strip()
    bot.send_message(
        message.chat.id,
        "üì¶ –í–≤–µ–¥–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<—à—Ç—Ä–∏—Ö–∫–æ–¥>:<–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>, ...\n"
        "–ü—Ä–∏–º–µ—Ä: 46207657112:2, 46207657113:5"
    )
    bot.register_next_step_handler(
        message, 
        lambda m: process_order_items(m, shop_name)
    )

def process_order_items(message, shop_name):
    try:
        items = []
        for pair in message.text.split(','):
            barcode, qty = map(str.strip, pair.split(':'))
            items.append({
                "barcode": barcode,
                "quantity": int(qty)
            })
        
        with get_db_connection() as conn:
            with conn.cursor() as cursor:
                cursor.execute(
                    "INSERT INTO orders (supervisor_id, shop_name, products) "
                    "SELECT id, %s, %s FROM supervisors WHERE telegram_id = %s",
                    (shop_name, json.dumps(items), message.chat.id)
                )
                conn.commit()
        
        bot.send_message(
            message.chat.id,
            "‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!",
            reply_markup=main_menu()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
        bot.send_message(
            message.chat.id,
            "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

if __name__ == "__main__":
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    bot.infinity_polling()
